{"version":3,"sources":["logo.png","components/ContactForm.js","App.js","serviceWorker.js","store/reducers/index.js","constants/actionTypes.js","store/index.js","store/middleware/index.js","index.js"],"names":["module","exports","__webpack_require__","p","Basic","react_default","a","createElement","formik_esm","initialValues","key","name","email","contactno","iswhatsapp","validate","values","errors","test","length","onSubmit","_ref","setSubmitting","setTimeout","jsonbody","JSON","stringify","alert","fetch","method","headers","Content-Type","Access-Control-Allow-Origin","body","then","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","response","data","error","wrap","_context","prev","next","json","sent","ok","message","status","abrupt","Promise","reject","stop","_x","apply","this","arguments","_ref3","isSubmitting","type","component","disabled","App","_useState","useState","_useState2","slicedToArray","setMessage","_useState3","_useState4","setIsFetching","_useState5","_useState6","url","fetchData","useCallback","Error","concat","catch","e","useEffect","className","src","logo","alt","react_router","exact","path","ContactForm","react_router_dom","to","Boolean","window","location","hostname","match","combineReducers","state","undefined","action","payload","toConsumableArray","composeEnhancers","composeWithDevTools","store","createStore","reducer","applyMiddleware","getState","console","log","returnValue","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fa8bea5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.407f9f59.png\";","// Render Prop\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>Contact Form</h1>\n    <Formik\n      initialValues={{ key: 'bDjtovZu64HRZddEELvKj2tD6HXVUlYx', name:'', email: '', contactno: '', iswhatsapp: false }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required Email';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        if(!values.name){\n            errors.name = 'Required Name';\n        }\n        if(!values.contactno){\n            errors.contactno = 'Required Contact';\n        } else if (values.contactno.length < 10 && values.contactno.length > 13){\n            errors.contactno = 'Invalid Contact';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          const jsonbody = JSON.stringify(values, null);\n          alert(jsonbody);\n          const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'https://scoar-login.herokuapp.com/scoar/add' },\n            body: jsonbody\n        };\n        fetch('https://scoar-login.herokuapp.com/scoar/add', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n            })\n          setSubmitting(true);\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <p>Name:</p>\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n          <br/>\n          <p>Email:</p>\n          <Field type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <br/>\n          <p>Contact Number:</p>\n          <Field type=\"number\" name=\"contactno\" />\n          <ErrorMessage name=\"contactno\" component=\"div\" />\n          <br/>\n          <p>Is this a Whatsapp Number:</p>\n          <Field type=\"checkbox\" name=\"iswhatsapp\" />\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default Basic;","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport logo from \"./logo.png\";\nimport \"./App.css\";\nimport Basic from \"./components/ContactForm\";\n\nfunction App() {\n  const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState(\"/api\");\n\n  const fetchData = useCallback(() => {\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((json) => {\n        setMessage(json.message);\n        setIsFetching(false);\n      })\n      .catch((e) => {\n        setMessage(`API call failed: ${e}`);\n        setIsFetching(false);\n      });\n  }, [url]);\n\n  useEffect(() => {\n    setIsFetching(true);\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {process.env.NODE_ENV === \"production\" ? (\n          <p>Scoar</p>\n        ) : (\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n        )}\n      </header>\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Basic />\n          <Link to=\"/test\">Test</Link>\n        </Route>\n        <Route exact path=\"/test\">\n          <h1>Hey there! Why are you still testing ??</h1>\n          <Link to=\"/\">Go to home page</Link>\n        </Route>\n      </Switch>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../../constants/actionTypes\";\n\nconst test = (state = [], action) => {\n  switch (action.type) {\n    case actionTypes.TEST:\n      alert(\"Working \" + action.payload);\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ test });\n","export const TEST = 'TEST'","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./reducers\";\nimport { logger } from \"./middleware\";\n\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(logger)));\n\nexport default store;\n","export const logger = ({ getState }) => (next) => (action) => {\n  console.log(\"will dispatch\", action);\n\n  // Call the next dispatch method in the middleware chain.\n  const returnValue = next(action);\n\n  console.log(\"state after dispatch\", getState());\n\n  // This will likely be the action itself, unless\n  // a middleware further in chain changed it.\n  return returnValue;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from './store'\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}